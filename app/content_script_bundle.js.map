{
  "version": 3,
  "sources": ["../../../../../../../../devtools/projects/protocol/src/lib/message-bus.ts", "../../../../../../../../devtools/projects/shell-browser/src/app/chrome-message-bus.ts", "../../../../../../../../devtools/projects/shell-browser/src/app/same-page-message-bus.ts", "../../../../../../../../devtools/projects/shell-browser/src/app/content-script.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type Parameters<F> = F extends(...args: infer T) => any ? T : never;\n\nexport abstract class MessageBus<T> {\n  abstract on<E extends keyof T>(topic: E, cb: T[E]): void;\n  abstract once<E extends keyof T>(topic: E, cb: T[E]): void;\n  abstract emit<E extends keyof T>(topic: E, args?: Parameters<T[E]>): boolean;\n  abstract destroy(): void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/// <reference types=\"chrome\"/>\n\nimport {Events, MessageBus, Parameters} from 'protocol';\n\ninterface ChromeMessage<T, K extends keyof T> {\n  topic: K;\n  args: Parameters<T[K]>;\n}\n\ntype AnyEventCallback<Ev> = <E extends keyof Ev>(topic: E, args: Parameters<Ev[E]>) => void;\n\nexport class ChromeMessageBus extends MessageBus<Events> {\n  private _disconnected = false;\n  private _listeners: any[] = [];\n\n  constructor(private _port: chrome.runtime.Port) {\n    super();\n\n    _port.onDisconnect.addListener(() => {\n      // console.log('Disconnected the port');\n      this._disconnected = true;\n    });\n  }\n\n  onAny(cb: AnyEventCallback<Events>): () => void {\n    const listener = (msg: ChromeMessage<Events, keyof Events>): void => {\n      cb(msg.topic, msg.args);\n    };\n    this._port.onMessage.addListener(listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      this._port.onMessage.removeListener(listener);\n    };\n  }\n\n  on<E extends keyof Events>(topic: E, cb: Events[E]): () => void {\n    const listener = (msg: ChromeMessage<Events, keyof Events>): void => {\n      if (msg.topic === topic) {\n        cb.apply(null, msg.args);\n      }\n    };\n    this._port.onMessage.addListener(listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      this._port.onMessage.removeListener(listener);\n    };\n  }\n\n  once<E extends keyof Events>(topic: E, cb: Events[E]): void {\n    const listener = (msg: ChromeMessage<Events, keyof Events>) => {\n      if (msg.topic === topic) {\n        cb.apply(null, msg.args);\n        this._port.onMessage.removeListener(listener);\n      }\n    };\n    this._port.onMessage.addListener(listener);\n  }\n\n  emit<E extends keyof Events>(topic: E, args?: Parameters<Events[E]>): boolean {\n    if (this._disconnected) {\n      return false;\n    }\n    this._port.postMessage({\n      topic,\n      args,\n    });\n    return true;\n  }\n\n  destroy(): void {\n    this._listeners.forEach((l) => window.removeEventListener('message', l));\n    this._listeners = [];\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Events, MessageBus, Parameters} from 'protocol';\n\ntype AnyEventCallback<Ev> = <E extends keyof Ev>(topic: E, args: Parameters<Ev[E]>) => void;\n\nexport class SamePageMessageBus extends MessageBus<Events> {\n  private _listeners: any[] = [];\n\n  constructor(private _source: string, private _destination: string) {\n    super();\n  }\n\n  onAny(cb: AnyEventCallback<Events>): () => void {\n    const listener = (e: MessageEvent): void => {\n      if (e.source !== window || !e.data || !e.data.topic || e.data.source !== this._destination) {\n        return;\n      }\n      cb(e.data.topic, e.data.args);\n    };\n    window.addEventListener('message', listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      window.removeEventListener('message', listener);\n    };\n  }\n\n  on<E extends keyof Events>(topic: E, cb: Events[E]): () => void {\n    const listener = (e: MessageEvent): void => {\n      if (e.source !== window || !e.data || e.data.source !== this._destination || !e.data.topic) {\n        return;\n      }\n      if (e.data.topic === topic) {\n        cb.apply(null, e.data.args);\n      }\n    };\n    window.addEventListener('message', listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      window.removeEventListener('message', listener);\n    };\n  }\n\n  once<E extends keyof Events>(topic: E, cb: Events[E]): void {\n    const listener = (e: MessageEvent): void => {\n      if (e.source !== window || !e.data || e.data.source !== this._destination || !e.data.topic) {\n        return;\n      }\n      if (e.data.topic === topic) {\n        cb.apply(null, e.data.args);\n      }\n      window.removeEventListener('message', listener);\n    };\n    window.addEventListener('message', listener);\n  }\n\n  emit<E extends keyof Events>(topic: E, args?: Parameters<Events[E]>): boolean {\n    window.postMessage(\n        {\n          source: this._source,\n          topic,\n          args,\n        },\n        '*');\n    return true;\n  }\n\n  destroy(): void {\n    this._listeners.forEach((l) => window.removeEventListener('message', l));\n    this._listeners = [];\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChromeMessageBus} from './chrome-message-bus';\nimport {SamePageMessageBus} from './same-page-message-bus';\n\nexport const main = () => {\n  let backgroundDisconnected = false;\n  let backendInitialized = false;\n\n  // console.log('Content script executing', (window as any));\n\n  const port = chrome.runtime.connect({\n    name: 'content-script',\n  });\n\n  const handleDisconnect = (): void => {\n    // console.log('Background disconnected', new Date());\n    localMessageBus.emit('shutdown');\n    localMessageBus.destroy();\n    chromeMessageBus.destroy();\n    backgroundDisconnected = true;\n  };\n\n  port.onDisconnect.addListener(handleDisconnect);\n\n  const localMessageBus =\n      new SamePageMessageBus('angular-devtools-content-script', 'angular-devtools-backend');\n  const chromeMessageBus = new ChromeMessageBus(port);\n\n  const handshakeWithBackend = (): void => {\n    localMessageBus.emit('handshake');\n  };\n\n  chromeMessageBus.onAny((topic, args) => {\n    localMessageBus.emit(topic, args);\n  });\n\n  localMessageBus.onAny((topic, args) => {\n    backendInitialized = true;\n    chromeMessageBus.emit(topic, args);\n  });\n\n  if (!backendInitialized) {\n    // tslint:disable-next-line:no-console\n    console.log('Attempting initialization', new Date());\n\n    const retry = () => {\n      if (backendInitialized || backgroundDisconnected) {\n        return;\n      }\n      handshakeWithBackend();\n      setTimeout(retry, 500);\n    };\n    retry();\n  }\n};\n\n// expose to use as callback for chrome.tabs.executeScript in background.ts\nglobalThis.main = main;\n"],
  "mappings": "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",
  "names": ["MessageBus", "ChromeMessageBus", "MessageBus", "constructor", "_port", "onDisconnect", "addListener", "_disconnected", "onAny", "cb", "listener", "msg", "topic", "args", "onMessage", "_listeners", "push", "splice", "indexOf", "removeListener", "on", "apply", "once", "emit", "postMessage", "destroy", "forEach", "l", "window", "removeEventListener", "SamePageMessageBus", "MessageBus", "constructor", "_source", "_destination", "onAny", "cb", "listener", "e", "source", "window", "data", "topic", "args", "addEventListener", "_listeners", "push", "splice", "indexOf", "removeEventListener", "on", "apply", "once", "emit", "postMessage", "destroy", "forEach", "l", "main", "backgroundDisconnected", "backendInitialized", "port", "chrome", "runtime", "connect", "name", "handleDisconnect", "localMessageBus", "emit", "destroy", "chromeMessageBus", "onDisconnect", "addListener", "SamePageMessageBus", "ChromeMessageBus", "handshakeWithBackend", "onAny", "topic", "args", "console", "log", "Date", "retry", "setTimeout", "globalThis"]
}
