{
  "version": 3,
  "sources": ["../../../../../../../../devtools/projects/shell-browser/src/app/background.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/// <reference types=\"chrome\"/>\n\nimport {AngularDetection} from './detect-angular-for-extension-icon';\n\nconst isManifestV3 = chrome.runtime.getManifest().manifest_version === 3;\n\nconst browserAction = (() => {\n  // Electron does not expose browserAction object,\n  // Use empty calls as fallback if they are not defined.\n  const noopAction = {setIcon: () => {}, setPopup: () => {}};\n\n  if (isManifestV3) {\n    return chrome.action || noopAction;\n  }\n\n  return chrome.browserAction || noopAction;\n})();\n\n// By default use the black and white icon.\n// Replace it only when we detect an Angular app.\nbrowserAction.setIcon({\n  path: {\n    16: chrome.runtime.getURL(`assets/icon-bw16.png`),\n    48: chrome.runtime.getURL(`assets/icon-bw48.png`),\n    128: chrome.runtime.getURL(`assets/icon-bw128.png`),\n  },\n});\n\nconst ports: {\n  [tab: string]:\n      |{\n        'content-script': chrome.runtime.Port|null;\n        devtools: chrome.runtime.Port|null;\n      }|undefined;\n} = {};\n\nchrome.runtime.onConnect.addListener((port) => {\n  let tab: string|null = null;\n  let name: string|null = null;\n  // tslint:disable-next-line:no-console\n  console.log('Connection event in the background script');\n\n  if (isNumeric(port.name)) {\n    tab = port.name;\n\n    // tslint:disable-next-line:no-console\n    console.log('Angular devtools connected, injecting the content script', port.name, ports[tab]);\n\n    name = 'devtools';\n    installContentScript(parseInt(port.name, 10));\n  } else {\n    if (!port.sender || !port.sender.tab) {\n      // tslint:disable-next-line:no-console\n      console.error('Unable to access the port sender and sender tab');\n\n      return;\n    }\n    if (port.sender.tab.id === undefined) {\n      // tslint:disable-next-line:no-console\n      console.error('Sender tab id is undefined');\n\n      return;\n    }\n\n    // tslint:disable-next-line:no-console\n    console.log('Content script connected', port.sender.tab.id);\n    tab = port.sender.tab.id.toString();\n    name = 'content-script';\n  }\n\n  let portsTab = ports[tab];\n  if (!portsTab) {\n    // tslint:disable-next-line:no-console\n    console.log('Creating a tab port');\n\n    portsTab = ports[tab] = {\n      devtools: null,\n      'content-script': null,\n    };\n  }\n\n  portsTab[name] = port;\n\n  if (portsTab.devtools && portsTab['content-script']) {\n    doublePipe(portsTab.devtools, portsTab['content-script'], tab);\n  }\n});\n\nconst isNumeric = (str: string): boolean => {\n  return +str + '' === str;\n};\n\nconst installContentScript = (tabId: number) => {\n  // tslint:disable-next-line:no-console\n  console.log('Installing the content-script');\n\n  // We first inject the content-script and after that\n  // invoke the global that it exposes.\n\n  if (isManifestV3) {\n    chrome.scripting.executeScript(\n        {files: ['app/content_script_bundle.js'], target: {tabId}}, () => {\n          chrome.scripting.executeScript({func: () => globalThis.main(), target: {tabId}});\n        });\n\n    return;\n  }\n\n  // manifest V2 APIs\n  chrome.tabs.executeScript(tabId, {file: 'app/content_script_bundle.js'}, (result) => {\n    chrome.tabs.executeScript(tabId, {\n      code: 'globalThis.main()',\n    });\n  });\n};\n\nconst doublePipe =\n    (devtoolsPort: chrome.runtime.Port|null, contentScriptPort: chrome.runtime.Port,\n     tab: string) => {\n      if (devtoolsPort === null) {\n        console.warn('DevTools port is equal to null');\n        return;\n      }\n\n      // tslint:disable-next-line:no-console\n      console.log('Creating two-way communication channel', Date.now(), ports);\n\n      const onDevToolsMessage = (message: chrome.runtime.Port) => {\n        contentScriptPort.postMessage(message);\n      };\n      devtoolsPort.onMessage.addListener(onDevToolsMessage);\n\n      const onContentScriptMessage = (message: chrome.runtime.Port) => {\n        devtoolsPort.postMessage(message);\n      };\n      contentScriptPort.onMessage.addListener(onContentScriptMessage);\n\n      const shutdown = (source: string) => {\n        // tslint:disable-next-line:no-console\n        console.log('Disconnecting', source);\n\n        devtoolsPort.onMessage.removeListener(onDevToolsMessage);\n        contentScriptPort.onMessage.removeListener(onContentScriptMessage);\n        devtoolsPort.disconnect();\n        contentScriptPort.disconnect();\n        ports[tab] = undefined;\n      };\n      devtoolsPort.onDisconnect.addListener(shutdown.bind(null, 'devtools'));\n      contentScriptPort.onDisconnect.addListener(shutdown.bind(null, 'content-script'));\n    };\n\nconst getPopUpName = (ng: AngularDetection) => {\n  if (!ng.isAngular) {\n    return 'not-angular.html';\n  }\n  if (!ng.isIvy || !ng.isSupportedAngularVersion) {\n    return 'unsupported.html';\n  }\n  if (!ng.isDebugMode) {\n    return 'production.html';\n  }\n  return 'supported.html';\n};\n\nchrome.runtime.onMessage.addListener((req, sender) => {\n  if (!req.isAngularDevTools) {\n    return;\n  }\n  if (sender && sender.tab) {\n    browserAction.setPopup({\n      tabId: sender.tab.id,\n      popup: `popups/${getPopUpName(req)}`,\n    });\n  }\n  if (sender && sender.tab && req.isAngular) {\n    browserAction.setIcon({\n      tabId: sender.tab.id,\n      path: {\n        16: chrome.runtime.getURL(`assets/icon16.png`),\n        48: chrome.runtime.getURL(`assets/icon48.png`),\n        128: chrome.runtime.getURL(`assets/icon128.png`),\n      },\n    });\n  }\n});\n"],
  "mappings": "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",
  "names": ["isManifestV3", "chrome", "runtime", "getManifest", "manifest_version", "browserAction", "noopAction", "setIcon", "setPopup", "action", "path", "getURL", "ports", "onConnect", "addListener", "port", "tab", "name", "console", "log", "isNumeric", "installContentScript", "parseInt", "sender", "error", "id", "undefined", "toString", "portsTab", "devtools", "doublePipe", "str", "tabId", "scripting", "executeScript", "files", "target", "func", "globalThis", "main", "tabs", "file", "result", "code", "devtoolsPort", "contentScriptPort", "warn", "Date", "now", "onDevToolsMessage", "message", "postMessage", "onMessage", "onContentScriptMessage", "shutdown", "source", "removeListener", "disconnect", "onDisconnect", "bind", "getPopUpName", "ng", "isAngular", "isIvy", "isSupportedAngularVersion", "isDebugMode", "req", "isAngularDevTools", "popup"]
}
